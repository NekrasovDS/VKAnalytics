import requests
import time
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill
import tkinter as tk
from tkinter import messagebox

count = 1

wb = Workbook()
ws = wb.active
ws.title = "VK Users"

headers = ['–ò–º—è', '–§–∞–º–∏–ª–∏—è', 'Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'Id –≥—Ä—É–ø–ø—ã', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
ws.append(headers)

header_font = Font(bold=True, size=13, color="000000")
header_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

def get_info_login():
    def on_submit():
        uid_input = entry_user_id.get().strip()
        token_input = entry_token.get().strip()

        if not uid_input or not token_input:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ —Ç–æ–∫–µ–Ω.")
            return

        try:
            uid = int(uid_input)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        root.destroy()  # –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
        get_info_params(uid, token_input)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏

    root = tk.Tk()
    root.title("VK –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    root.geometry("350x180")
    root.resizable(False, False)

    tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", anchor="w").pack(padx=10, pady=(10, 0), fill="x")
    entry_user_id = tk.Entry(root)
    entry_user_id.pack(padx=10, fill="x")

    tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω:", anchor="w").pack(padx=10, pady=(10, 0), fill="x")
    entry_token = tk.Entry(root)
    entry_token.pack(padx=10, fill="x")

    tk.Button(root, text="–î–∞–ª–µ–µ", command=on_submit).pack(pady=15)

    root.mainloop()

for col in range(1, len(headers) + 1):
    ws.cell(row=1, column=col).font = header_font
    ws.cell(row=1, column=col).fill = header_fill
    ws.column_dimensions[chr(64 + col)].width = 25

def get_info_params(uid, token_input):

    def save_parameters():
        global user_count, group_count
        try:
            user_count = int(entry_user_count.get())
            group_count = int(entry_group_count.get())

            messagebox.showinfo("–£—Å–ø–µ—Ö",
                                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {user_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {group_count}")
            window.destroy()
            get_info(uid, token_input)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")

    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    window = tk.Tk()
    window.title("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")

    label_user_count = tk.Label(window, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    label_user_count.pack(pady=5)
    entry_user_count = tk.Entry(window)
    entry_user_count.pack(pady=5)

    label_group_count = tk.Label(window, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø:")
    label_group_count.pack(pady=5)
    entry_group_count = tk.Entry(window)
    entry_group_count.pack(pady=5)

    button_ok = tk.Button(window, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=save_parameters)
    button_ok.pack(pady=20)

    window.mainloop()

def get_info(user_id, token):
    row_num = 2

    for i in range(user_count):
        print(f"\nüîÅ –ò–¢–ï–†–ê–¶–ò–Ø {i + 1}")
        params = {
            'user_id': user_id,
            'order': 'random',
            'count': count,
            'fields': 'first_name,last_name',
            'v': '5.199',
            'access_token': token
        }

        try:
            r = requests.get("https://api.vk.com/method/friends.get", params=params)
            data = r.json()
            if "error" in data:
                error_code = data['error'].get('error_code')
                error_msg = data['error'].get('error_msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

                # ‚ö†Ô∏è –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ—à–∏–±–∫–∞ 5 ‚Äî "User authorization failed")
                if error_code == 5:
                    messagebox.showerror("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ ID –∏/–∏–ª–∏ —Ç–æ–∫–µ–Ω.")
                    return  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                else:
                    print("–û—à–∏–±–∫–∞ VK –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥—Ä—É–∑–µ–π:", error_msg)
                    continue
            friends = data.get('response', {}).get('items', [])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∑–µ–π:", e)
            continue

        for friend in friends:
            print(f"\nüë§ {friend['first_name']} {friend['last_name']} ({friend['id']})")
            ws.cell(row=row_num, column=1).value = friend['first_name']
            ws.cell(row=row_num, column=2).value = friend['last_name']
            ws.cell(row=row_num, column=3).value = friend['id']

            subs_params = {
                'user_id': friend['id'],
                'extended': 1,
                'count': group_count,
                'v': '5.199',
                'access_token': token
            }

            try:
                subs_r = requests.get("https://api.vk.com/method/users.getSubscriptions", params=subs_params)
                subs_data = subs_r.json()
                if "error" in subs_data:
                    print("–û—à–∏–±–∫–∞ VK –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", subs_data['error']['error_msg'])
                    continue
                groups = subs_data.get('response', {}).get('items', [])
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫:", e)
                continue

            for group in groups:
                group_id = group.get('id')
                group_info_r = requests.get("https://api.vk.com/method/groups.getById", params={
                    'group_id': group_id,
                    'fields': 'activity',
                    'v': '5.199',
                    'access_token': token
                })

                group_data = group_info_r.json()
                if "error" in group_data:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ VK –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {group_data['error']['error_msg']}")
                    activity = "–û—à–∏–±–∫–∞ VK"
                else:
                    groups = group_data.get('response', {}).get('groups', [])
                    if groups:
                        group_info = groups[0]
                        activity = group_info.get('activity', '‚Äî')
                    else:
                        activity = '‚Äî'

                time.sleep(1)
                print(f"üìå –ì—Ä—É–ø–ø–∞ {group_id}, —Ç–µ–º–∞—Ç–∏–∫–∞: {activity}")
                ws.cell(row=row_num, column=4).value = group_id
                ws.cell(row=row_num, column=5).value = activity
                row_num += 1
            row_num += 1
            time.sleep(2)

    wb.save("user_database_1.xlsx")
    print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'user_database_1.xlsx'")